Webserv Project Overview (42 School)

The Webserv project is designed to help students understand how a web server works by implementing their own HTTP server. This server will handle HTTP requests and responses, including serving static files and processing dynamic content. Here’s a detailed breakdown of the key requirements:

	1.	Basic HTTP Protocol (1.1):
	•	Handle GET, POST, and DELETE requests.
	•	Manage different HTTP response codes (200, 400, 404, 500, etc.).
	•	Implement chunked transfer encoding.
	2.	Configuration Parsing:
	•	The server must read a configuration file (usually in a .conf format).
	•	The configuration can define multiple server blocks (virtual hosts).
	•	Each server can specify ports, server names, error pages, root directories, and more.
	3.	CGI Handling:
	•	Handle CGI scripts (e.g., PHP, Python) for dynamic content generation.
	•	Support environment variables and interaction with scripts.
	4.	Concurrency and Connections:
	•	Manage multiple client connections concurrently.
	•	Handle both blocking and non-blocking I/O operations (select, poll, or epoll).
	5.	Static File Handling:
	•	Serve static files such as HTML, CSS, JavaScript, images, etc.
	•	Handle file permissions, directories, and indexes (directory listing).
	6.	Security and Error Handling:
	•	Implement proper error handling and logging.
	•	Manage timeouts, request size limits, and other security concerns (e.g., request validation).
	7.	Performance:
	•	Make sure the server is performant, handling large amounts of requests efficiently.
	•	Basic load balancing between requests might be required.
	8.	Testing and Robustness:
	•	Thoroughly test the server with tools like curl, telnet, or browsers.
	•	Ensure it works with multiple browsers and passes specific edge cases.

Steps to Complete the Project

	1.	Research:
	•	Learn about HTTP 1.1, server architecture, socket programming, and the event-driven I/O models (select, poll, epoll).
	•	Study existing web servers (Nginx, Apache) for reference.
	2.	Initial Setup:
	•	Define a clear project structure and create a Makefile.
	•	Set up basic socket connections and listen on a port.
	3.	Configuration Parsing:
	•	Develop a configuration file format (similar to Nginx’s config).
	•	Write a parser to read the configuration.
	4.	HTTP Request Handling:
	•	Implement HTTP request parsing (headers, methods).
	•	Manage static file responses (e.g., GET requests for HTML files).
	5.	Handling Methods (GET, POST, DELETE):
	•	Add handling for POST (uploading files or sending data) and DELETE (removing files).
	•	Implement the proper HTTP status codes (e.g., 404 for not found, 500 for server errors).
	6.	Dynamic Content with CGI:
	•	Implement support for CGI scripts (PHP, Python, etc.).
	•	Use environment variables and process handling to execute scripts.
	7.	Concurrency:
	•	Implement handling of multiple connections using select, poll, or epoll.
	•	Ensure non-blocking I/O for performance.
	8.	Security Features:
	•	Add input validation, limit request sizes, and prevent timeout abuse.
	•	Set up logging for debugging and security analysis.
	9.	Testing:
	•	Test with various tools (curl, browsers).
	•	Check for memory leaks and performance issues.
	10.	Documentation:
	•	Write clear documentation for how to use, configure, and test the server.

Task Division in a Group of 3

Here’s how you can divide the work equally:

	1.	Configuration and Setup (Person 1):
	•	Work on the configuration file parser and settings.
	•	Handle the server setup and initialization of different server blocks (virtual hosts).
	•	Later, help with logging and error handling.
	2.	HTTP Request Handling and CGI (Person 2):
	•	Focus on parsing HTTP requests (headers, methods) and generating proper HTTP responses.
	•	Handle dynamic content processing with CGI (interacting with scripts).
	•	Later, handle POST and DELETE methods.
	3.	Concurrency and Performance (Person 3):
	•	Implement socket handling and event-driven I/O (select, poll, or epoll).
	•	Ensure that the server can handle multiple clients simultaneously.
	•	Later, optimize performance and work on security features like timeouts, request limits, etc.

Once the core structure is ready, all members can help with testing, debugging, and performance optimization.

This division allows each person to have ownership over a specific component of the project while maintaining collaboration throughout. It’s essential to have regular sync-ups to make sure the pieces fit together correctly.
-----------------------------385769693941014098002577856832--
